{"version":3,"sources":["appSlice.js","features/searchField/searchFieldSlice.js","features/searchField/SearchField.js","features/darkModeToggle/DarkModeToggle.js","features/header/Header.js","features/posts/postsSlice.js","features/subreddits/subredditsSlice.js","assets/Annotation.js","features/PostModal/PostModal.js","features/comment/Comment.js","features/comments/Comments.js","assets/Arrow.js","features/votes/Votes.js","features/post/Post.js","features/posts/Posts.js","features/subreddit/Subreddit.js","features/subreddits/Subreddits.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","theme","reducers","updateTheme","state","action","payload","selectTheme","app","actions","searchFieldSlice","searchText","updateSearchText","selectSearchText","searchField","SearchField","dispatch","useDispatch","useSelector","id","className","type","placeholder","value","onChange","e","target","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","DarkModeToggle","data-testid","onClick","Header","src","alt","fetchPosts","createAsyncThunk","url","a","axios","get","response","data","children","postsSlice","isLoading","hasErrors","posts","created","ups","num_comments","title","selftext","author","extraReducers","builder","addCase","pending","fulfilled","rejected","selectPosts","subredditsSlice","activeSubreddit","subreddits","icon","updateActiveSubreddit","selectSubreddits","selectActiveSubreddit","Annotation","PostModal","post","toggleModal","role","Post","Comment","comment","commentDate","moment","fromNow","body","Comments","postSubreddit","postId","useState","comments","setComments","setIsLoading","setHasErrors","useEffect","fetchComments","count","slice","map","Arrow","testId","Votes","votes","vote","setVote","upvotes","kFormatter","handleClick","targetBtn","aria-label","height","width","num","Math","abs","sign","toFixed","postDate","commentsAmount","openModal","setOpenModal","toggleComments","setToggleComments","currentTarget","parentNode","baseColor","highlightColor","post_hint","is_video","controls","media","reddit_video","fallback_url","options","overrides","props","p","href","subreddit","Posts","filteredPosts","filter","toLowerCase","trim","includes","Subreddit","active","Subreddits","App","store","configureStore","reducer","appReducer","postsReducer","subredditReducer","searchFieldReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2db698e1.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    theme: 'light',\r\n  },\r\n  reducers: {\r\n    updateTheme: (state, action) => {\r\n      state.theme = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectTheme = (state) => state.app.theme;\r\n\r\nexport const { updateTheme } = appSlice.actions;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const searchFieldSlice = createSlice({\r\n  name: 'searchField',\r\n  initialState: {\r\n    searchText: '',\r\n  },\r\n  reducers: {\r\n    updateSearchText: (state, action) => {\r\n      state.searchText = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectSearchText = (state) =>\r\n  state.searchField.searchText;\r\n\r\nexport const { updateSearchText } = searchFieldSlice.actions;\r\n\r\nexport default searchFieldSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  selectSearchText,\r\n  updateSearchText,\r\n} from './searchFieldSlice';\r\n\r\nexport default function SearchField() {\r\n  const dispatch = useDispatch();\r\n  const searchText = useSelector(selectSearchText);\r\n\r\n  return (\r\n    <div id=\"search\" className=\"flex flex-1 mx-4 max-w-sm relative\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search Reddit\"\r\n        value={searchText}\r\n        onChange={(e) => dispatch(updateSearchText(e.target.value))}\r\n        className=\"flex-1 w-full border-solid border-2 dark:bg-gray-600 border-gray-300 dark:border-gray-500 rounded-md pl-10 pr-4 py-2\"\r\n      ></input>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-5 w-5 absolute left-4 top-3 text-gray-700 dark:text-gray-300\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={2}\r\n          d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTheme } from '../../appSlice';\r\n\r\nexport default function DarkModeToggle() {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div\r\n      id=\"dark-mode-toggle\"\r\n      className=\"hidden sm:flex border-solid border-2 border-gray-300 dark:border-gray-500 rounded-md divide-x-2 divide-gray-300 dark:divide-gray-500 divide-solid\"\r\n    >\r\n      <button\r\n        id=\"light-mode\"\r\n        data-testid=\"btn-light-mode\"\r\n        className=\"px-4 py-2 text-primary dark:text-gray-50\"\r\n        onClick={() => dispatch(updateTheme('light'))}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-6 w-6 pointer-events-none\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n            d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"\r\n          />\r\n        </svg>\r\n      </button>\r\n      <button\r\n        id=\"dark-mode\"\r\n        data-testid=\"btn-dark-mode\"\r\n        className=\"px-4 py-2 dark:text-primary\"\r\n        onClick={() => dispatch(updateTheme('dark'))}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-6 w-6 pointer-events-none\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"\r\n          />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport SearchField from '../searchField/SearchField';\r\nimport DarkModeToggle from '../darkModeToggle/DarkModeToggle';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"fixed z-20 min-w-full shadow-lg bg-white dark:bg-gray-700 dark:text-gray-50\">\r\n      <div className=\"container mx-auto px-4 h-20 flex justify-between items-center\">\r\n        <div id=\"logo\" className=\"flex items-center\">\r\n          <img\r\n            className=\"w-8 fill-current text-green-600\"\r\n            src=\"reddit-logo.svg\"\r\n            alt=\"reddit logo\"\r\n          />\r\n          <h1 className=\"pl-2 sm:text-xl font-semibold\">\r\n            <span className=\"font-bold\">Reddit</span> Client\r\n          </h1>\r\n        </div>\r\n        <SearchField />\r\n        <DarkModeToggle />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n  'posts/fetchPosts',\r\n  async (url) => {\r\n    const response = await axios.get(url);\r\n    return response.data.data.children;\r\n  },\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState: {\r\n    isLoading: false,\r\n    hasErrors: false,\r\n    posts: [\r\n      {\r\n        data: {\r\n          id: 1,\r\n          created: '',\r\n          ups: '',\r\n          num_comments: '',\r\n          title: '',\r\n          selftext: ' ',\r\n          author: '',\r\n        },\r\n      },\r\n      {\r\n        data: {\r\n          id: 2,\r\n          created: '',\r\n          ups: '',\r\n          num_comments: '',\r\n          title: '',\r\n          selftext: ' ',\r\n          author: '',\r\n        },\r\n      },\r\n      {\r\n        data: {\r\n          id: 3,\r\n          created: '',\r\n          ups: '',\r\n          num_comments: '',\r\n          title: '',\r\n          selftext: ' ',\r\n          author: '',\r\n        },\r\n      },\r\n      {\r\n        data: {\r\n          id: 4,\r\n          created: '',\r\n          ups: '',\r\n          num_comments: '',\r\n          title: '',\r\n          selftext: ' ',\r\n          author: '',\r\n        },\r\n      },\r\n      {\r\n        data: {\r\n          id: 5,\r\n          created: '',\r\n          ups: '',\r\n          num_comments: '',\r\n          title: '',\r\n          selftext: ' ',\r\n          author: '',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.posts = action.payload;\r\n        state.isLoading = false;\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.hasErrors = true;\r\n        state.isLoading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const selectPosts = (state) => state.posts;\r\n\r\nexport default postsSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const subredditsSlice = createSlice({\r\n  name: 'subreddits',\r\n  initialState: {\r\n    activeSubreddit: 'Popular',\r\n    subreddits: [\r\n      {\r\n        icon: 'https://api.adorable.io/avatars/25/Home',\r\n        title: 'Popular',\r\n      },\r\n      {\r\n        icon: 'https://b.thumbs.redditmedia.com/EndDxMGB-FTZ2MGtjepQ06cQEkZw_YQAsOUudpb9nSQ.png',\r\n        title: 'AskReddit',\r\n      },\r\n      {\r\n        icon: 'https://a.thumbs.redditmedia.com/nmh5l-zCsmmc3y2ehfjtWRJjGmCEWEJDTjtW3AGMz60.png',\r\n        title: 'Wallstreetbets',\r\n      },\r\n      {\r\n        icon: 'https://b.thumbs.redditmedia.com/0PgZl68jAxA6T1BH6uvUQ5Bz1F1GrrJLCL8oi2Gz0Ak.png',\r\n        title: 'Gaming',\r\n      },\r\n      {\r\n        icon: 'https://b.thumbs.redditmedia.com/Kl3TBjINRBLd9sukJaSPts_0geISdO-jtVniyfCw1GA.png',\r\n        title: 'CryptoCurrency',\r\n      },\r\n      {\r\n        icon: 'https://a.thumbs.redditmedia.com/4SKK4rzvSSDPLWbx4kt0BvE7B-j1UQBLZJsNCGgMz54.png',\r\n        title: 'Germany',\r\n      },\r\n      {\r\n        icon: 'https://styles.redditmedia.com/t5_2twpw/styles/communityIcon_8bhyo9k303x71.png',\r\n        title: 'Blackcats',\r\n      },\r\n      {\r\n        icon: 'https://api.adorable.io/avatars/25/Home',\r\n        title: 'Cooking',\r\n      },\r\n      {\r\n        icon: 'https://b.thumbs.redditmedia.com/B7IpR8P1mEsQIjdizK5x79s5aGfJUtKk3u2ksGZ9n2Q.png',\r\n        title: 'Todayilearned',\r\n      },\r\n      {\r\n        icon: 'https://styles.redditmedia.com/t5_2xiqj/styles/communityIcon_zvmcowk0d0671.jpg?format=pjpg&s=1537e0d3fd8639bce301c389ef60e99f44587d0a',\r\n        title: 'Aoe4',\r\n      },\r\n      {\r\n        icon: 'https://styles.redditmedia.com/t5_2qgzy/styles/communityIcon_rvt3zjh1fc551.png',\r\n        title: 'Sports',\r\n      },\r\n      {\r\n        icon: 'https://a.thumbs.redditmedia.com/E0Bkwgwe5TkVLflBA7WMe9fMSC7DV2UOeff-UpNJeb0.png',\r\n        title: 'News',\r\n      },\r\n      {\r\n        icon: 'https://styles.redditmedia.com/t5_2s9h3/styles/communityIcon_ujdrcdijabb61.png',\r\n        title: 'DunderMifflin',\r\n      },\r\n    ],\r\n  },\r\n  reducers: {\r\n    updateActiveSubreddit: (state, action) => {\r\n      state.activeSubreddit = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectSubreddits = (state) =>\r\n  state.subreddits.subreddits;\r\nexport const selectActiveSubreddit = (state) =>\r\n  state.subreddits.activeSubreddit;\r\n\r\nexport const { updateActiveSubreddit } = subredditsSlice.actions;\r\n\r\nexport default subredditsSlice.reducer;\r\n","import React from 'react';\r\n\r\nexport default function Annotation({ className }) {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className={'h-6 w-6 pointer-events-none ' + className}\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      stroke=\"currentColor\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Post from '../post/Post';\r\n\r\nexport default function PostModal({ post, toggleModal }) {\r\n  if (!post)\r\n    return <p className=\"text-red-600\">Couldn't load post</p>;\r\n\r\n  return (\r\n    <div\r\n      id=\"post-modal\"\r\n      className=\"w-screen h-screen fixed bg-gray-900 bg-opacity-75 inset-0 flex items-center justify-center z-10 overflow-y-auto\"\r\n      onClick={toggleModal}\r\n      role=\"dialog\"\r\n    >\r\n      <Post post={post} className=\"max-w-screen-lg mx-4\" />\r\n    </div>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nimport React from 'react';\r\n\r\nexport default function Comment({ comment }) {\r\n  const commentDate = moment(comment.data.created * 1000).fromNow();\r\n\r\n  return (\r\n    <div\r\n      id=\"comment\"\r\n      className=\"mb-2 px-8 py-3 bg-gray-100 dark:bg-gray-600 rounded-md hover:shadow\"\r\n    >\r\n      <div className=\"flex justify-between pb-2\">\r\n        <div className=\"font-semibold text-sm\">\r\n          {comment.data.author}\r\n        </div>\r\n        <div className=\"text-xs\">{commentDate}</div>\r\n      </div>\r\n      <p>{comment.data.body}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Comment from '../comment/Comment';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nexport default function Comments({ postSubreddit, postId }) {\r\n  const [comments, setComments] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasErrors, setHasErrors] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(\r\n          `https://www.reddit.com/r/${postSubreddit}/comments/${postId}.json`,\r\n        );\r\n        setComments(response.data[1].data.children);\r\n      } catch (e) {\r\n        setHasErrors(true);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [postSubreddit, postId]);\r\n\r\n  return (\r\n    <div\r\n      id=\"post-comments\"\r\n      className=\"mt-2\"\r\n      data-testid=\"comments-wrapper\"\r\n    >\r\n      {isLoading && <Skeleton count={3} />}\r\n      {hasErrors && (\r\n        <h2 className=\"mb-8 p-6 bg-white rounded-md shadow-lg text-xl text-red-500 font-bold\">\r\n          Cannot display comments...\r\n        </h2>\r\n      )}\r\n      {!hasErrors &&\r\n        !isLoading &&\r\n        comments.slice(0, 10).map((comment) => {\r\n          return (\r\n            <Comment\r\n              comment={comment}\r\n              key={comment.data.id}\r\n              isLoading={isLoading}\r\n            />\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Arrow({ className, testId }) {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className={'h-6 w-6 pointer-events-none ' + className}\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      stroke=\"currentColor\"\r\n      data-testid={testId}\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M9 11l3-3m0 0l3 3m-3-3v8m0-13a9 9 0 110 18 9 9 0 010-18z\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport 'react-loading-skeleton/dist/skeleton.css';\r\nimport Arrow from '../../assets/Arrow';\r\nimport { kFormatter } from '../post/Post';\r\n\r\nexport default function Votes({ votes, isLoading }) {\r\n  const [vote, setVote] = useState('');\r\n  const upvotes = kFormatter(votes);\r\n\r\n  const handleClick = (targetBtn) => {\r\n    vote === targetBtn ? setVote('') : setVote(targetBtn);\r\n  };\r\n\r\n  return (\r\n    <div id=\"votes\" className=\"pr-6 flex flex-col items-center\">\r\n      <button\r\n        onClick={() => handleClick('upvote')}\r\n        className=\"text-gray-500 dark:text-gray-300 hover:text-green-500\"\r\n        aria-label=\"upvote\"\r\n      >\r\n        <Arrow\r\n          className={`transform transition duration-300 ${\r\n            vote === 'upvote' ? 'text-green-500 scale-125' : ''\r\n          }`}\r\n          testId=\"upvote-arrow\"\r\n        />\r\n      </button>\r\n      <p className=\"my-1.5 text-lg font-bold\">\r\n        {isLoading ? <Skeleton height={24} width={31} /> : upvotes}\r\n      </p>\r\n      <button\r\n        onClick={() => handleClick('downvote')}\r\n        className=\"text-gray-500 dark:text-gray-300 hover:text-red-500\"\r\n        aria-label=\"downvote\"\r\n      >\r\n        <Arrow\r\n          className={`transform transition duration-300 rotate-180 ${\r\n            vote === 'downvote' ? 'text-red-500 scale-125' : ''\r\n          }\r\n    `}\r\n          testId=\"downvote-arrow\"\r\n        />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nimport React, { useState } from 'react';\r\nimport Markdown from 'markdown-to-jsx';\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\nimport 'react-loading-skeleton/dist/skeleton.css';\r\nimport Annotation from '../../assets/Annotation';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectPosts } from '../posts/postsSlice';\r\nimport { selectTheme } from '../../appSlice';\r\nimport PostModal from '../PostModal/PostModal';\r\nimport Comments from '../comments/Comments';\r\nimport Votes from '../votes/Votes';\r\n\r\nexport const kFormatter = (num) => {\r\n  return Math.abs(num) > 999\r\n    ? Math.sign(num) * (Math.abs(num) / 1000).toFixed(1) + 'k'\r\n    : Math.sign(num) * Math.abs(num);\r\n};\r\n\r\nexport default function Post({ post, className = '' }) {\r\n  const { isLoading } = useSelector(selectPosts);\r\n  const theme = useSelector(selectTheme);\r\n\r\n  const postDate = moment(post.data.created * 1000).fromNow();\r\n  const commentsAmount = kFormatter(post.data.num_comments);\r\n\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [toggleComments, setToggleComments] = useState(false);\r\n\r\n  const toggleModal = (e) => {\r\n    if (\r\n      e.target === e.currentTarget &&\r\n      e.target.parentNode.parentNode.parentNode.id !== 'post-modal'\r\n    )\r\n      setOpenModal(!openModal);\r\n  };\r\n\r\n  const renderPostImage = () => {\r\n    if (isLoading) return <Skeleton />;\r\n    if (post.data.post_hint === 'image') {\r\n      return (\r\n        <img\r\n          src={post.data.url}\r\n          alt=\"\"\r\n          className=\"rounded-md max-h-80\"\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderPostVideo = () => {\r\n    if (isLoading) return <Skeleton />;\r\n    if (post.data.is_video) {\r\n      return (\r\n        <video className=\"max-h-80\" controls>\r\n          <source\r\n            src={post.data.media.reddit_video.fallback_url}\r\n            type=\"video/mp4\"\r\n          />\r\n        </video>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderPostText = () => {\r\n    if (isLoading) return <Skeleton count={4} />;\r\n    if (post.data.selftext) {\r\n      return (\r\n        <Markdown\r\n          options={{\r\n            overrides: {\r\n              a: {\r\n                props: { className: 'underline hover:text-primary' },\r\n              },\r\n              p: {\r\n                props: { className: 'mb-2' },\r\n              },\r\n            },\r\n          }}\r\n        >\r\n          {post.data.selftext}\r\n        </Markdown>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderPostLink = () => {\r\n    if (isLoading) return <Skeleton />;\r\n    if (post.data.post_hint === 'link') {\r\n      return (\r\n        <a\r\n          href={post.data.url}\r\n          className=\"underline hover:text-primary\"\r\n          data-testid=\"post-link\"\r\n        >\r\n          {post.data.url}\r\n        </a>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <article\r\n      className={`mb-8 p-6 bg-white text-gray-800 dark:bg-gray-700 dark:text-gray-50 rounded-md shadow-lg hover:shadow-xl transition-shadow duration-300 flex z-20 ${className}`}\r\n    >\r\n      {openModal && (\r\n        <PostModal post={post} toggleModal={toggleModal} />\r\n      )}\r\n      <SkeletonTheme\r\n        baseColor={theme === 'dark' ? '#4b5563' : ''}\r\n        highlightColor={theme === 'dark' ? '#6b7280' : ''}\r\n      >\r\n        <Votes votes={post.data.ups} isLoading={isLoading} />\r\n\r\n        <div id=\"post-content\" className=\"flex-1 overflow-hidden\">\r\n          <h2\r\n            className=\"mb-4 text-xl font-semibold cursor-pointer\"\r\n            onClick={toggleModal}\r\n          >\r\n            {isLoading ? <Skeleton /> : post.data.title}\r\n          </h2>\r\n          {renderPostImage()}\r\n          {renderPostVideo()}\r\n          {renderPostText()}\r\n          {renderPostLink()}\r\n          <hr className=\"mt-4\" />\r\n          <div\r\n            id=\"post-footer\"\r\n            className=\"flex flex-wrap justify-between px-8 py-2 gap-2\"\r\n          >\r\n            <div className=\"font-semibold text-sm\">\r\n              {isLoading ? (\r\n                <Skeleton width={100} />\r\n              ) : (\r\n                post.data.author\r\n              )}\r\n            </div>\r\n            <div className=\"text-xs\">\r\n              {isLoading ? <Skeleton width={100} /> : postDate}\r\n            </div>\r\n            <div className=\"flex text-sm\">\r\n              <button\r\n                className=\"text-gray-500 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-50\"\r\n                onClick={() => setToggleComments(!toggleComments)}\r\n                aria-label=\"Comments\"\r\n              >\r\n                <Annotation className=\"mr-1 transition duration-300\" />\r\n              </button>\r\n              {isLoading ? <Skeleton width={75} /> : commentsAmount}\r\n            </div>\r\n          </div>\r\n          {toggleComments && (\r\n            <Comments\r\n              postSubreddit={post.data.subreddit}\r\n              postId={post.data.id}\r\n            />\r\n          )}\r\n        </div>\r\n      </SkeletonTheme>\r\n    </article>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectPosts, fetchPosts } from './postsSlice';\r\nimport { selectActiveSubreddit } from '../subreddits/subredditsSlice';\r\nimport Post from '../post/Post';\r\nimport { selectSearchText } from '../searchField/searchFieldSlice';\r\n\r\nexport default function Posts() {\r\n  const { posts, hasErrors } = useSelector(selectPosts);\r\n  const activeSubreddit = useSelector(selectActiveSubreddit);\r\n  const searchText = useSelector(selectSearchText);\r\n  const dispatch = useDispatch();\r\n\r\n  const filteredPosts = posts.filter((post) => {\r\n    return post.data.title\r\n      .toLowerCase()\r\n      .trim()\r\n      .includes(searchText.toLowerCase().trim());\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      fetchPosts(`https://www.reddit.com/r/${activeSubreddit}.json`),\r\n    );\r\n  }, [dispatch, activeSubreddit]);\r\n\r\n  return (\r\n    <section className=\"lg:w-2/3 mx-4 flex-auto\" aria-label=\"posts\">\r\n      {hasErrors && (\r\n        <h2 className=\"mb-8 p-6 bg-white rounded-md shadow-lg text-xl text-red-500 font-bold\">\r\n          Cannot display posts...\r\n        </h2>\r\n      )}\r\n      {!hasErrors &&\r\n        filteredPosts &&\r\n        filteredPosts.map((post) => {\r\n          return <Post post={post} key={post.data.id} />;\r\n        })}\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { updateActiveSubreddit } from '../subreddits/subredditsSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function Subreddit({\r\n  subreddit = { icon: '', title: '' },\r\n  active,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <button\r\n      className={`w-full flex items-center p-4 rounded-md transition-colors hover:text-primary ${\r\n        active ? 'bg-gray-100 dark:bg-gray-600' : ''\r\n      }`}\r\n      onClick={() => dispatch(updateActiveSubreddit(subreddit.title))}\r\n    >\r\n      <img\r\n        src={subreddit.icon}\r\n        alt=\"\"\r\n        className=\"w-6 h-6 mr-2 border border-gray-500 rounded-full\"\r\n      />\r\n      <p className=\"font-semibold\">{subreddit.title}</p>\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectSubreddits,\r\n  selectActiveSubreddit,\r\n} from './subredditsSlice';\r\nimport Subreddit from '../subreddit/Subreddit';\r\n\r\nexport default function Subreddits() {\r\n  const subreddits = useSelector(selectSubreddits);\r\n  const activeSubreddit = useSelector(selectActiveSubreddit);\r\n\r\n  return (\r\n    <section\r\n      className=\"lg:mx-4 lg:w-1/3 lg:ml-0 flex-auto\"\r\n      aria-label=\"subreddits\"\r\n    >\r\n      <div className=\"p-6 bg-white dark:bg-gray-700 sm:rounded-md shadow-lg\">\r\n        <h2 className=\"text-xl font-bold\">Subreddits</h2>\r\n        <div className=\"mt-4\">\r\n          {subreddits.map((subreddit) => {\r\n            return (\r\n              <Subreddit\r\n                subreddit={subreddit}\r\n                key={subreddit.title}\r\n                active={\r\n                  activeSubreddit === subreddit.title ? true : false\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTheme } from './appSlice';\r\nimport Header from './features/header/Header';\r\nimport Posts from './features/posts/Posts';\r\nimport Subreddits from './features/subreddits/Subreddits';\r\n\r\nfunction App() {\r\n  const theme = useSelector(selectTheme);\r\n\r\n  return (\r\n    <div\r\n      className={`App ${theme === 'light' ? '' : 'dark'}`}\r\n      data-testid=\"app-wrapper\"\r\n    >\r\n      <div className=\"bg-gray-100 dark:bg-gray-600 dark:text-gray-50 min-h-screen\">\r\n        <Header />\r\n        <main className=\"container mx-auto pt-24 flex flex-col lg:flex-row\">\r\n          <Posts />\r\n          <Subreddits />\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from '../appSlice';\r\nimport postsReducer from '../features/posts/postsSlice';\r\nimport subredditReducer from '../features/subreddits/subredditsSlice';\r\nimport searchFieldReducer from '../features/searchField/searchFieldSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    posts: postsReducer,\r\n    subreddits: subredditReducer,\r\n    searchField: searchFieldReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}